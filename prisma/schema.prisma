// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  country       String?
  city          String?
  address       String?
  postalCode    String?
  dateOfBirth   DateTime?
  isVerified    Boolean   @default(false)
  isActive      Boolean   @default(true)
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  transactions  Transaction[] @relation("BuyerTransactions")
  sellerTransactions Transaction[] @relation("SellerTransactions")
  messages      Message[]
  receivedMessages Message[] @relation("ReceivedMessages")
  reviews       Review[]
  receivedReviews Review[] @relation("ReceivedReviews")
  escrowAccounts EscrowAccount[]
  notifications Notification[]
  verificationRequests VerificationRequest[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String        @id @default(cuid())
  title       String
  description String
  price       Decimal       @db.Decimal(10, 2)
  currency    String        @default("USD")
  category    String
  condition   ProductCondition
  images      String[]      // Array of image URLs
  location    String
  country     String
  city        String
  isActive    Boolean       @default(true)
  isFeatured  Boolean       @default(false)
  viewCount   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  sellerId    String
  seller      User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  reviews     Review[]

  @@index([sellerId])
  @@index([category])
  @@index([country])
  @@index([isActive])
}

model Transaction {
  id              String            @id @default(cuid())
  productId       String
  buyerId         String
  sellerId        String
  amount          Decimal           @db.Decimal(10, 2)
  currency        String            @default("USD")
  platformFee     Decimal           @db.Decimal(10, 2)
  status          TransactionStatus @default(PENDING)
  paymentMethod   String?
  paymentIntentId String?           @unique
  escrowAccountId String?
  shippingAddress String?
  trackingNumber  String?
  estimatedDelivery DateTime?
  actualDelivery   DateTime?
  buyerConfirmed   Boolean          @default(false)
  sellerConfirmed  Boolean          @default(false)
  disputeReason    String?
  disputeResolved  Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  product         Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  buyer           User              @relation("BuyerTransactions", fields: [buyerId], references: [id], onDelete: Cascade)
  seller          User              @relation("SellerTransactions", fields: [sellerId], references: [id], onDelete: Cascade)
  escrowAccount   EscrowAccount?    @relation(fields: [escrowAccountId], references: [id])
  messages        Message[]

  @@index([buyerId])
  @@index([sellerId])
  @@index([productId])
  @@index([status])
  @@index([createdAt])
}

model EscrowAccount {
  id              String    @id @default(cuid())
  userId          String
  balance         Decimal   @db.Decimal(10, 2) @default(0)
  currency        String    @default("USD")
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]

  @@unique([userId, currency])
  @@index([userId])
}

model Message {
  id            String    @id @default(cuid())
  transactionId String
  senderId      String
  receiverId    String
  content       String
  messageType   MessageType @default(TEXT)
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())

  // Relations
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  sender        User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
  receiver      User        @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([transactionId])
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

model Review {
  id            String    @id @default(cuid())
  productId     String
  transactionId String    @unique
  reviewerId    String
  reviewedId    String
  rating        Int       // 1-5 stars
  comment       String?
  isPublic      Boolean   @default(true)
  createdAt     DateTime  @default(now())

  // Relations
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  reviewer      User      @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewed      User      @relation("ReceivedReviews", fields: [reviewedId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([reviewerId])
  @@index([reviewedId])
  @@index([rating])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?            // Additional data for the notification
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model VerificationRequest {
  id            String    @id @default(cuid())
  userId        String
  documentType  String    // ID, passport, etc.
  documentUrl   String    // URL to uploaded document
  status        VerificationStatus @default(PENDING)
  adminNotes    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum ProductCondition {
  NEW
  LIKE_NEW
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum TransactionStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  DISPUTED
  REFUNDED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum NotificationType {
  TRANSACTION_UPDATE
  MESSAGE_RECEIVED
  PAYMENT_RECEIVED
  SHIPPING_UPDATE
  DISPUTE_OPENED
  VERIFICATION_APPROVED
  VERIFICATION_REJECTED
  SYSTEM_ANNOUNCEMENT
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}
